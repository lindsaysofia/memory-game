{"version":3,"sources":["components/Card.js","components/Gamboard.js","components/RestartLevel.js","components/Scoreboard.js","components/RestartGame.js","App.js","index.js"],"names":["Card","props","card","handleClick","index","className","onClick","alt","src","card_images","image_url_small","name","Gameboard","currentCards","isLoading","alreadyClicked","map","id","RestartLevel","handleRestartLevel","Scoreboard","level","currentScore","bestScore","levelScore","RestartGame","handleRestartGame","App","useState","data","setData","setIsLoading","setAlreadyClicked","setLevel","setCurrentScore","setBestScore","setLevelScore","setCurrentCards","a","fetch","mode","response","json","cardData","getRandomInteger","max","Math","floor","random","useEffect","getData","length","newCards","number","min","cards","integers","randomInteger","includes","push","clicked","getNewCurrentCards","e","target","dataset","newLevelScore","prevCurrentScore","prevLevelScore","prevLevel","newShuffledCards","cardsCopy","slice","i","j","temp","shuffleCurrentCards","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+VAqBeA,MAlBf,SAAcC,GACZ,IAAQC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,YAAaC,EAAUH,EAAVG,MAC3B,OACE,sBACEC,UAAU,OACVC,QAASH,EACT,aAAYC,EAHd,UAKE,qBACEG,IAAI,GACJC,IAAKN,EAAKA,KAAKO,YAAY,GAAGC,gBAC9B,aAAYN,IAEd,mBAAG,aAAYA,EAAf,SAAuBF,EAAKA,KAAKS,W,MCcxBC,MA1Bf,SAAmBX,GACjB,IAAQY,EAAyDZ,EAAzDY,aAAcV,EAA2CF,EAA3CE,YAAaW,EAA8Bb,EAA9Ba,UACnC,OADiEb,EAAnBc,eAErC,oHACED,EAEP,4CAIA,qBAAKT,UAAU,YAAf,SACGQ,EAAaG,KAAI,SAACd,EAAME,GACvB,OACE,cAAC,EAAD,CAEEF,KAAMA,EACNC,YAAaA,EACbC,MAAOA,GAHFF,EAAKA,KAAKe,U,MCNdC,MATf,SAAsBjB,GACpB,IAAQkB,EAAuBlB,EAAvBkB,mBACR,OACE,qBAAKd,UAAU,eAAf,SACE,wBAAQC,QAASa,EAAjB,8B,MCcSC,MAlBf,SAAoBnB,GAClB,IACEoB,EAIEpB,EAJFoB,MACAC,EAGErB,EAHFqB,aACAC,EAEEtB,EAFFsB,UACAC,EACEvB,EADFuB,WAEF,OACE,sBAAKnB,UAAU,aAAf,UACE,gDAAmBiB,KACnB,mBAAGjB,UAAU,gBACb,6CAAgBkB,KAChB,mBAAGlB,UAAU,gBACb,uCAAUgB,EAAV,WAAyBG,EAAzB,MAAwC,EAAmB,GAAbH,EAAQ,U,MCJ7CI,MATf,SAAqBxB,GACnB,IAAQyB,EAAsBzB,EAAtByB,kBACR,OACE,qBAAKrB,UAAU,cAAf,SACE,wBAAQC,QAASoB,EAAjB,6BCoISC,MApIf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOd,EAAP,KAAkBiB,EAAlB,KACA,EAA4CH,oBAAS,GAArD,mBAAOb,EAAP,KAAuBiB,EAAvB,KACA,EAA0BJ,mBAAS,GAAnC,mBAAOP,EAAP,KAAcY,EAAd,KACA,EAAwCL,mBAAS,GAAjD,mBAAON,EAAP,KAAqBY,EAArB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOL,EAAP,KAAkBY,EAAlB,KACA,EAAoCP,mBAAS,GAA7C,mBAAOJ,EAAP,KAAmBY,EAAnB,KACA,EAAwCR,mBAAS,IAAjD,mBAAOf,EAAP,KAAqBwB,EAArB,KARa,4CAUb,8BAAAC,EAAA,sEACyBC,MAAM,gDAAiD,CAACC,KAAM,SADvF,cACQC,EADR,gBAEyBA,EAASC,OAFlC,OAEQC,EAFR,OAGEb,EAAQa,EAASd,MAHnB,4CAVa,sBAgBb,IAAMe,EAAmB,SAACC,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAqFpC,OAjBAI,qBAAU,YArFG,mCAsFXC,KACC,IAEHD,qBAAU,WACR,GAAIpB,EAAKsB,OAAS,EAAG,CACnB,IAAIC,EAvEmB,SAACC,GAC1BA,EAASP,KAAKQ,IAAID,EAAQxB,EAAKsB,QAG/B,IAFA,IAAMI,EAAQ,GACRC,EAAW,GACVH,EAAS,GAAG,CAEjB,IADA,IAAII,EAAgBb,EAAiBf,EAAKsB,QACnCK,EAASE,SAASD,IACvBA,EAAgBb,EAAiBf,EAAKsB,QAExCI,EAAMI,KAAK,CACTzD,KAAM2B,EAAK4B,GACXG,SAAS,IAEXJ,EAASG,KAAKF,GACdJ,GAAiB,EAGnB,OADAtB,GAAa,GACNwB,EAsDUM,CAAmB,EAAmB,GAAbxC,EAAQ,IAChDgB,EAAgBe,MAEjB,CAACvB,EAAMR,EAAON,IAEjBkC,qBAAU,WACJ3B,EAAeC,GACjBY,EAAab,KAEd,CAACA,EAAcC,IAGhB,sBAAKlB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,6CACA,2GACA,cAAC,EAAD,CACEc,mBApCmB,WACzBe,EAAgBZ,EAAeE,GAC/BY,EAAc,GACdJ,GAAkB,MAmCd,cAAC,EAAD,CACEN,kBAjCkB,WACxBQ,EAAgB,GAChBE,EAAc,GACdH,EAAS,GACTD,GAAkB,SAgChB,iCACE,cAAC,EAAD,CACEX,MAAOA,EACPC,aAAcA,EACdC,UAAWA,EACXC,WAAYA,IAEd,cAAC,EAAD,CACEX,aAAcA,EACdV,YAvEY,SAAC2D,GACnB,IAAI1D,EAAQ0D,EAAEC,OAAOC,QAAQ5D,MAC7B,GAAIS,EAAaT,GAAOwD,QACtB5B,GAAkB,OACb,CACL,IAAIiC,EAAgBzC,EAAa,EAIjC,GAHAX,EAAaT,GAAOwD,SAAU,EAC9B1B,GAAgB,SAACgC,GAAD,OAAsBA,EAAmB,KACzD9B,GAAc,SAAC+B,GAAD,OAAoBA,EAAiB,KAC/CF,IAAmB,EAAmB,GAAb5C,EAAQ,GACnCU,GAAa,GACbE,GAAS,SAACmC,GAAD,OAAeA,EAAY,KACpChC,EAAc,OACT,CACL,IAAIiC,EAzBkB,SAACd,GAEzB,IADF,IAAIe,EAAYf,EAAMgB,QACXC,EAAIF,EAAUnB,OAAS,EAAGqB,EAAI,EAAGA,IAAK,CAC7C,IAAIC,EAAI3B,KAAKC,MAAMD,KAAKE,UAAYwB,EAAI,IACpCE,EAAOJ,EAAUE,GACrBF,EAAUE,GAAKF,EAAUG,GACzBH,EAAUG,GAAKC,EAEnB,OAAOJ,EAiBoBK,CAAoB9D,GAC3CwB,EAAgBgC,MAyDdvD,UAAWA,EACXC,eAAgBA,WC/H1B6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b2f8c6ff.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Card.css';\n\nfunction Card(props) {\n  const { card, handleClick, index } = props;\n  return (\n    <div \n      className=\"Card\"\n      onClick={handleClick}\n      data-index={index}\n    >\n      <img \n        alt=\"\"\n        src={card.card.card_images[0].image_url_small}\n        data-index={index}\n      />\n      <p data-index={index}>{card.card.name}</p>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport '../styles/Gameboard.css'\n\nfunction Gameboard(props) {\n  const { currentCards, handleClick, isLoading, alreadyClicked } = props;\n  if (alreadyClicked) {\n    return <h2>Oops, you already clicked that card! Please restart the level or restart the game.</h2>\n  } else if (isLoading) {\n    return (\n      <h2>Loading...</h2>\n    );\n  } else {\n    return (\n      <div className=\"Gameboard\">\n        {currentCards.map((card, index) => {\n          return (\n            <Card\n              key={card.card.id}\n              card={card}\n              handleClick={handleClick}\n              index={index}\n            />\n          );\n        })}\n      </div>\n    );\n  }  \n}\n\nexport default Gameboard;","import React from 'react';\nimport '../styles/RestartLevel.css';\n\nfunction RestartLevel(props) {\n  const { handleRestartLevel } = props;\n  return (\n    <div className=\"RestartLevel\">\n      <button onClick={handleRestartLevel}>Restart Level</button>\n    </div>\n  );\n}\n\nexport default RestartLevel;","import React from 'react';\nimport '../styles/Scoreboard.css';\n\nfunction Scoreboard(props) {\n  const {\n    level,\n    currentScore,\n    bestScore,\n    levelScore,\n  } = props;\n  return (\n    <div className=\"Scoreboard\">\n      <p>Current Score: {currentScore}</p>\n      <i className=\"fas fa-bolt\"></i>\n      <p>Best Score: {bestScore}</p>\n      <i className=\"fas fa-bolt\"></i>\n      <p>Level {level} Score: {levelScore} / {4 + ((level - 1) * 2)}</p>\n    </div>\n  );\n}\n\nexport default Scoreboard;","import React from 'react';\nimport '../styles/RestartGame.css';\n\nfunction RestartGame(props) {\n  const { handleRestartGame } = props;\n  return (\n    <div className=\"RestartGame\">\n      <button onClick={handleRestartGame}>Restart Game</button>\n    </div>\n  );\n}\n\nexport default RestartGame;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Gameboard from './components/Gamboard';\nimport RestartLevel from './components/RestartLevel';\nimport Scoreboard from './components/Scoreboard';\nimport RestartGame from './components/RestartGame';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [alreadyClicked, setAlreadyClicked] = useState(false);\n  const [level, setLevel] = useState(1);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [levelScore, setLevelScore] = useState(0);\n  const [currentCards, setCurrentCards] = useState([]);\n\n  async function getData() {\n    const response = await fetch('https://db.ygoprodeck.com/api/v7/cardinfo.php', {mode: 'cors'});\n    const cardData = await response.json();\n    setData(cardData.data);\n  }\n\n  const getRandomInteger = (max) => {\n    return Math.floor(Math.random() * max);\n  };\n\n  const getNewCurrentCards = (number) => {\n    number = Math.min(number, data.length);\n    const cards = [];\n    const integers = [];\n    while (number > 0) {\n      let randomInteger = getRandomInteger(data.length);\n      while (integers.includes(randomInteger)) {\n        randomInteger = getRandomInteger(data.length);\n      }\n      cards.push({\n        card: data[randomInteger],\n        clicked: false,\n      });\n      integers.push(randomInteger);\n      number = number -1;\n    }\n    setIsLoading(false);\n    return cards;\n  };\n\n  // from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  const shuffleCurrentCards = (cards) => {\n    let cardsCopy = cards.slice();\n      for (let i = cardsCopy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = cardsCopy[i];\n        cardsCopy[i] = cardsCopy[j];\n        cardsCopy[j] = temp;\n    }\n    return cardsCopy;\n  };\n\n  const handleClick = (e) => {\n    let index = e.target.dataset.index;\n    if (currentCards[index].clicked) {\n      setAlreadyClicked(true);\n    } else {\n      let newLevelScore = levelScore + 1;\n      currentCards[index].clicked = true;\n      setCurrentScore((prevCurrentScore) => prevCurrentScore + 1);\n      setLevelScore((prevLevelScore) => prevLevelScore + 1);\n      if (newLevelScore === (4 + ((level - 1) * 2))) {\n        setIsLoading(true);\n        setLevel((prevLevel) => prevLevel + 1);\n        setLevelScore(0);\n      } else {\n        let newShuffledCards = shuffleCurrentCards(currentCards);\n        setCurrentCards(newShuffledCards);\n      }\n    }\n  };\n\n  const handleRestartLevel = () => {\n    setCurrentScore(currentScore - levelScore);\n    setLevelScore(0);\n    setAlreadyClicked(false);\n  };\n\n  const handleRestartGame = () => {\n    setCurrentScore(0);\n    setLevelScore(0);\n    setLevel(1);\n    setAlreadyClicked(false);\n  };\n  \n  useEffect(() => {\n    getData();\n  }, []);\n\n  useEffect(() => {\n    if (data.length > 0) {\n      let newCards = getNewCurrentCards(4 + ((level - 1) * 2))\n      setCurrentCards(newCards);\n    }\n  }, [data, level, alreadyClicked]);\n\n  useEffect(() => {\n    if (currentScore > bestScore) {\n      setBestScore(currentScore);\n    }\n  }, [currentScore, bestScore]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Memory Game</h1>\n        <p>Get points by clicking on an image, but don't click on any more than once!</p>\n        <RestartLevel \n          handleRestartLevel={handleRestartLevel}\n        />\n        <RestartGame \n          handleRestartGame={handleRestartGame}\n        />\n      </header>\n      <main>\n        <Scoreboard \n          level={level}\n          currentScore={currentScore}\n          bestScore={bestScore}\n          levelScore={levelScore}\n        />\n        <Gameboard \n          currentCards={currentCards}\n          handleClick={handleClick}\n          isLoading={isLoading}\n          alreadyClicked={alreadyClicked}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}